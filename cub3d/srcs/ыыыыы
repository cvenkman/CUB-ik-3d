void	init_lodev(t_player *all)
{
	// all->camera_x = 0;
	all->ray_dir_x = 0;
	all->ray_dir_y = 0;
	all->map_x = 0;
	all->map_y = 0;
	all->side_dist_x = 0;
	all->side_dist_y = 0;
	all->delta_dist_x = 0;
	all->delta_dist_y = 0;
	all->perp_wall_dist = 0;
	all->step_x = 0;
	all->step_y = 0;
	// all->hit = 0;
	all->side = 0;
	all->line_height = 0;
	all->draw_start = 0;
	all->draw_end = 0;
	all->wall_x = 0;
	all->tex_x = 0;
	all->step = 0;
	all->tex_pos = 0;
}

void	my_mlx_pixel_put(t_win *data, int x, int y, int color)
{
	char	*dst;

	dst = data->addr + (y * data->line_length + x * (data->bits_per_pixel / 8));
	*(unsigned int *)dst = color;
}
int	print_texture(t_player *player, int i, int x)
{
	int	color;
	int	tex_y;

	while (i <= player->draw_end)
	{
		tex_y = (int)player->tex_pos & (TEX_HEIGHT - 1);
		player->tex_pos += player->step;
		if (player->side == 1)
		{
			if (player->step_y == -1)
				color = player->data->texture->west[player->tex_x][tex_y];
			else
				color = player->data->texture->east[player->tex_x][tex_y];
		}
		else
		{
			if (player->step_x == -1)
				color = player->data->texture->north[player->tex_x][tex_y];
			else
				color = player->data->texture->south[player->tex_x][tex_y];
		}
		my_mlx_pixel_put(player->data->win->mlx, x, i, color);
		// mlx_pixel_put(player->data->win->mlx, player->data->win->win, x, i, color);
		i++;
	}
	return (i);
}

void	print_all(int x, t_player *all)
{
	int	i;

	i = 0;
	while (i < all->draw_start)
	{
		my_mlx_pixel_put(all->img_win, x, i, 16777215);
		i++;
	}
	i = print_texture(all, all, i, x);
	while (i < HEIGHT)
	{
		my_mlx_pixel_put(all->img_win, x, i, 13120100);
		i++;
	}
}

void *raycasting(t_player *player)
{
	int	x;

	x = 0;
	init_lodev(&cub->lodev);
	while (x < WIDTH)
	{
		step1(player, x);
		step2(player);
		step3(player);
		step4(player);
		print_all(x, player);
		x++;
	}
	image_to_image_cp(player->img_win, &player->img_map, point_set(0, 0));
	mlx_put_image_to_window(player->img_win->mlx, player->img_win->win,
		player->img_win->img, 0, 0);
	return (NULL);
}

void	step1(t_player *all, int x)
{
	all->camera_x = 2 * x / (double)WIDTH - 1;
	all->ray_dir_x = all->dir_x + all->plane_x * all->camera_x;
	all->ray_dir_y = all->dir_y + all->plane_y * all->camera_x;
	all->map_x = (int)all->pos_x;
	all->map_y = (int)all->pos_y;
	all->delta_dist_x = sqrt(1 + (all->ray_dir_y * all->ray_dir_y)
			/ (all->ray_dir_x * all->ray_dir_x));
	all->delta_dist_y = sqrt(1 + (all->ray_dir_x * all->ray_dir_x)
			/ (all->ray_dir_y * all->ray_dir_y));
	all->hit = 0;
}

void	step2(t_player *all)
{
	if (all->ray_dir_x < 0)
	{
		all->step_x = -1;
		all->side_dist_x = (all->pos_x - all->map_x) * all->delta_dist_x;
	}
	else
	{
		all->step_x = 1;
		all->side_dist_x = (all->map_x + 1.0 - all->pos_x) * all->delta_dist_x;
	}
	if (all->ray_dir_y < 0)
	{
		all->step_y = -1;
		all->side_dist_y = (all->pos_y - all->map_y) * all->delta_dist_y;
	}
	else
	{
		all->step_y = 1;
		all->side_dist_y = (all->map_y + 1.0 - all->pos_y) * all->delta_dist_y;
	}
}

void	step3(t_player *all)
{
	while (all->hit == 0)
	{
		if (all->side_dist_x < all->side_dist_y)
		{
			all->side_dist_x += all->delta_dist_x;
			all->map_x += all->step_x;
			all->side = 0;
		}
		else
		{
			all->side_dist_y += all->delta_dist_y;
			all->map_y += all->step_y;
			all->side = 1;
		}
		if (player->data->map[all->map_x][all->map_y] == '1')
			all->hit = 1;
	}
	if (all->side == 0)
		all->perp_wall_dist = (all->map_x - all->pos_x
				+ (1 - all->step_x) / 2) / all->ray_dir_x;
	else
		all->perp_wall_dist = (all->map_y - all->pos_y
				+ (1 - all->step_y) / 2) / all->ray_dir_y;
}

void	step4(t_player *all)
{
	all->line_height = (int)(HEIGHT / all->perp_wall_dist);
	all->draw_start = -all->line_height / 2 + HEIGHT / 2;
	if (all->draw_start < 0)
		all->draw_start = 0;
	all->draw_end = all->line_height / 2 + HEIGHT / 2;
	if (all->draw_end >= HEIGHT)
		all->draw_end = HEIGHT - 1;
	if (all->side == 0)
		all->wall_x = all->pos_y + all->perp_wall_dist * all->ray_dir_y;
	else
		all->wall_x = all->pos_x + all->perp_wall_dist * all->ray_dir_x;
	all->wall_x -= floor ((all->wall_x));
	all->tex_x = (int)(all->wall_x * (double)TEX_WIDTH);
	if (all->side == 0 && all->ray_dir_x > 0)
		all->tex_x = TEX_WIDTH - all->tex_x - 1;
	if (all->side == 1 && all->ray_dir_y < 0)
		all->tex_x = TEX_WIDTH - all->tex_x - 1;
	all->step = 1.0 * TEX_HEIGHT / all->line_height;
	all->tex_pos = (all->draw_start - HEIGHT
			/ 2 + all->line_height / 2) * all->step;
}